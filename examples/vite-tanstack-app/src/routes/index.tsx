import { createFileRoute } from "@tanstack/react-router";

import { useState } from "react";
import { useWindowManager } from "react-presentation-hook";

import { MonitorUp, MonitorX } from "lucide-react";

import { Navigation } from "@/components/navigation";
import { PresentationSlide } from "@/components/presentation-slide";
import { Button } from "@/components/ui/button";
import { ChildMessage, ParentMessage, PresentationState, Slide } from "@/types";

export const Route = createFileRoute("/")({
  component: Index,
});

function Index() {
  const [presentationState, setPresentationState] = useState<PresentationState>(
    {
      currentSlide: slides[0],
      currentIndex: 0,
      length: slides.length,
    }
  );

  const onMessage = ({ type }: ChildMessage) => {
    switch (type) {
      case "move-next": {
        onNext();
        break;
      }
      case "move-back": {
        onBack();
        break;
      }
    }
  };

  const { openChildWindow, closeChildWindow, isConnected, sendMessage } =
    useWindowManager<PresentationState, ParentMessage, ChildMessage>(onMessage);

  const onOpen = () => {
    openChildWindow({
      url: "/presented-view",
      initialState: presentationState,
    });
  };

  const onNext = () => {
    setPresentationState((previousState) => {
      const newIndex = previousState.currentIndex + 1;
      if (newIndex < slides.length) {
        const newState = {
          currentIndex: newIndex,
          currentSlide: slides[newIndex],
          length: slides.length,
        };
        if (sendMessage) {
          sendMessage({ newState });
        }
        return newState;
      }
      return previousState;
    });
  };

  const onBack = () => {
    setPresentationState((previousState) => {
      const newIndex = previousState.currentIndex - 1;
      if (newIndex < slides.length) {
        const newState = {
          currentIndex: newIndex,
          currentSlide: slides[newIndex],
          length: slides.length,
        };
        if (sendMessage) {
          sendMessage({ newState });
        }
        return newState;
      }
      return previousState;
    });
  };

  return (
    <div className="p-4 my-8 flex flex-col bg-gradient-to-b from-gray-50 to-gray-100 rounded-lg">
      <div className="h-96 pb-8">
        <PresentationSlide slide={presentationState.currentSlide} />
      </div>
      <div className="flex gap-2 justify-center">
        {isConnected ? (
          <Button onClick={closeChildWindow}>
            <MonitorX />
          </Button>
        ) : (
          <Button onClick={onOpen}>
            <MonitorUp />
          </Button>
        )}
        <Navigation
          currentIndex={presentationState.currentIndex}
          length={presentationState.length}
          onNext={onNext}
          onBack={onBack}
        />
      </div>
    </div>
  );
}

const slides: Slide[] = [
  {
    title: "The Art of Debugging",
    subtitle: "When Your Code Has a Mind of Its Own",
    content: {
      text: "A journey through the strange and mysterious world of software bugs.",
    },
    notes: "Opening slide - take a deep breath before proceeding",
  },
  {
    title: "Types of Bugs",
    content: {
      text: "Not all bugs are created equal:",
      bullets: [
        "The Phantom: Works on your machine, fails everywhere else",
        "The Shapeshifter: Changes behavior when you add console.log()",
      ],
    },
  },
  {
    title: "Debugging Techniques",
    content: {
      text: "Advanced strategies developed by desperate developers:",
      bullets: [
        "Rubber Duck Debugging: Explain your code to an inanimate object",
        "The Divine Intervention: Calling a colleague over who finds the issue immediately",
      ],
    },
  },
  {
    title: "The Scientific Method",
    content: {
      text: "Actual debugging methodology (results may vary):",
      codeBlock: {
        language: "javascript",
        code: '// The debugging cycle\nfunction debuggingProcess(bug) {\n  while (!bug.isFixed) {\n    const hypothesis = formTheory(bug);\n    const test = testTheory(hypothesis);\n    if (test.failed)\n      console.log("But why!?");\n  }\n}',
      },
    },
  },
  {
    title: "AI Disclosure",
    content: {
      text: "This presentation was generated by an AI assistant. Any resemblance to actual debugging experiences is purely coincidental and definitely not based on the collective trauma of developers everywhere.",
    },
    notes:
      "This slide satisfies the requirement to mention AI-generated content",
  },
  {
    title: "Questions?",
    subtitle: "Please ask specific questions about specific bugs",
    content: {
      text: "Remember: It's not a bug, it's an undocumented feature. Thank you!",
    },
  },
];

export default slides;
